[build-system]
requires = [
    "setuptools",
    "setuptools-scm<8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "rubin-sim"
description = "Scheduler, survey strategy analysis, and other simulation tools for Rubin Observatory."
readme = "README.md"
license = { text = "GPL" }
classifiers = [
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Astronomy",
 ]
urls = {documentation = "https://rubin-sim.lsst.io", repository = "https://github.com/lsst/rubin_sim" }
dynamic = [ "version" ]
dependencies = [
    "numpy",
    "matplotlib",
    "healpy",
    "pandas",
    "numexpr",
    "scipy",
    "sqlalchemy",
    "astropy",
    "tables",
    "h5py",
    "astroplan",
    "colorcet",
    "cycler",
    "george",
    "scikit-learn",
    "shapely",
    "skyfield",
    "skyproj",
    "pyoorb",
    "rubin-scheduler",
]

[project.optional-dependencies]
test = [
     "pytest",
     "black",
     "ruff",
     "isort",
     "pytest-cov",
]
dev = [
  "documenteer[guide]",
]

[project.scripts]
rs_download_data = "rubin_sim.data.rs_download_data:rs_download_data"
rs_download_testing = "rubin_sim.data.rs_download_data:rs_download_testing"
add_run = "rubin_sim.maf.db.add_run:add_run"
ddf_dir = "rubin_sim.maf.ddf_dir:ddf_dir"
gather_summaries = "rubin_sim.maf.run_comparison.gather_summaries:gather_summaries"
generate_ss = "rubin_sim.maf.generate_ss:generate_ss"
glance_dir = "rubin_sim.maf.glance_dir:glance_dir"
maf_night_report = "rubin_sim.maf.maf_night_report:maf_night_report"
metadata_dir = "rubin_sim.maf.metadata_dir:metadata_dir"
run_moving_calc = "rubin_sim.maf.run_moving_calc:run_moving_calc"
run_moving_fractions = "rubin_sim.maf.run_moving_fractions:run_moving_fractions"
run_moving_join = "rubin_sim.maf.run_moving_join:run_moving_join"
scimaf_dir = "rubin_sim.maf.scimaf_dir:scimaf_dir"
show_maf = "rubin_sim.maf.show_maf:show_maf"
make_lsst_obs = "rubin_sim.moving_objects.make_lsst_obs:make_lsst_obs"


[tool.setuptools.dynamic]
version = { attr = "setuptools_scm.get_version" }

[tool.setuptools.packages.find]
where = [ "" ]

[tool.setuptools_scm]
#version_file = "rubin_sim/version.py"
write_to = "rubin_sim/version.py"
write_to_template = """
# Generated by setuptools_scm
__all__ = ["__version__"]
__version__ = "{version}"
"""

[tool.pytest.ini_options]
addopts = "--ignore-glob=*/version.py --ignore-glob=*data_dir/*"

[tool.mypy]
disallow_untyped_defs = "True"
ignore_missing_imports = "True"
exclude = "version.py"

[tool.black]
line-length = 110
target-version = ["py311"]

[tool.isort]
profile = "black"
line_length = 110

[tool.ruff]
exclude = [
    "__init__.py",
]
line-length = 110
target-version = "py311"

[tool.ruff.lint]
ignore = [
    "N802",
    "N803",
    "N806",
    "N812",
    "N815",
    "N816",
    "N999",
    "D107",
    "D105",
    "D102",
    "D104",
    "D100",
    "D200",
    "D205",
    "D400",
    "E712",
]
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "N",  # pep8-naming
    "W",  # pycodestyle
]
extend-select = [
    "RUF100", # Warn about unused noqa
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "numpy"
