#!/usr/bin/env python

import os
import glob
import argparse

from rubin_sim.maf.runComparison import RunComparison


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="Find resultsDbs in a series of directories and "
                                                 "gather up their summary stats into a single CSV file. "
                                                 "Intended to run on a set of metrics run on multiple "
                                                 "simulations, so that each resultsDb has similar summary"
                                                 "statistics.")
    parser.add_argument("--baseDir", type=str, default='.',
                        help="Director from where to search for MAF directories.")
    parser.add_argument("--outDir", type=str, default='.',
                        help="Directory to place the output csv file (file = [suffix_]summary.csv)")
    parser.add_argument("--suffix", type=str, default=None,
                        help="Suffix for directories within which to find resultsDbs. "
                             "Default is None, which searches for all potential MAF directories.")
    args = parser.parse_args()

    if args.suffix is None:
        runDirs = None
    else:
        runDirs = glob.glob(f"*_10yrs{args.suffix}")

    # Connect to resultsDbs and pull summary stats into a nice Dataframe
    rc = RunComparison(baseDir=args.baseDir, runDirs=runDirs)
    print(f'Found directories {rc.runDirs}')
    mdict = rc.buildMetricDict()
    rc.addSummaryStats(mdict)

    # Save summary statistics
    if args.suffix is None:
        outfile = "summary.csv"
    else:
        outfile = f"{args.suffix.replace('_', '')}_summary.csv"
    rc.summaryStats.to_csv(os.path.join(args.outDir, outfile))
