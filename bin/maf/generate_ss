#!/usr/bin/env python
import glob
import os
from rubin_sim.data import get_data_dir
import argparse
from rubin_sim.maf import batches


def generate_ss_commands(outfile='ss_script.sh', dbfiles=None, pops=None, start_mjd=60218.,
                         split=False):

    if dbfiles is None:
        dbfiles = glob.glob('*.db')
        dbfiles.sort()

    data_dir = os.path.join(get_data_dir(), 'orbits')
    orbit_files = {'granvik_5k': os.path.join(data_dir, 'granvik_5k.txt'),
                   'granvik_pha_5k': os.path.join(data_dir, 'granvik_pha_5k.txt'),
                   'l7_5k': os.path.join(data_dir, 'l7_5k.txt'),
                   'mba_5k': os.path.join(data_dir, 'mba_5k.txt'),
                   'oort': os.path.join(data_dir, 'oort.txt'),
                   'trojan_5k': os.path.join(data_dir, 'trojan_5k.txt')
                   }

    objtypes = {'granvik_5k': 'NEO',
                'granvik_pha_5k': 'PHA',
                'l7_5k': 'TNO',
                'mba_5k': 'MBA',
                'oort': 'Oort',
                'sdo_5k': 'SDO',
                'trojan_5k': 'Trojan'
                }

    if pops is None:
        # put in order so longer runtime ones are first
        pops = ['trojan_5k', 'l7_5k', 'mba_5k', 'granvik_5k', 'granvik_pha_5k']
    elif pops is not None:
        pp = [p for p in orbit_files.keys() if p == pops]
        if len(pp) == 0:
            print(f'Did not find population {pops} in expected types ({list(orbit_files.keys())}')
        pops = [pops]

    runs = [os.path.split(file)[-1].replace('.db', '') for file in dbfiles]
    runs = [run for run in runs if 'tracking' not in run]
    with open(outfile, 'w') as f:
        for pop in pops:
            objtype = objtypes[pop]
            Hrange, Hmark = batches.defaultHrange(objtype)
            char = batches.defaultCharacterization(objtype)
            for run, filename in zip(runs, dbfiles):
                if split:
                    splitfiles = glob.glob(os.path.join(data_dir, 'split') + f'/*{pop}*')
                    outDir = f'{run}_ss'
                    outfile_split = outfile.replace('.sh', f'_{pop}_split.sh')
                    try:
                        os.mkdir(outDir)
                    except FileExistsError:
                        # Directory already exists .. maybe need to remove split file
                        if os.path.isfile(outfile_split):
                            os.remove(outfile_split)
                    for i, splitfile in enumerate(splitfiles):
                        split = os.path.split(splitfile)[-1]
                        split = split.replace('.des', '').replace('.s3m', '').replace('.txt', '')
                        with open(outfile_split, 'a') as wi:
                            s1 = (f'makeLSSTobs --opsimDb {filename} --orbitFile {splitfile}'
                                  f' --outDir {outDir}')
                            s2 = (f'run_moving_calc --obsFile {outDir}/{run}__{split}_obs.txt'
                                  f' --opsimDb {filename} --orbitFile {orbit_files[pop]}'
                                  f' --outDir {outDir}/{split}'
                                  f' --opsimRun {run}'
                                  f' --hMin {Hrange[0]} --hMax {Hrange[1]} --hStep {Hrange[2]}'
                                  f' --hMark {Hmark}'
                                  f' --characterization {char}'
                                  f' --objtype {objtype}'
                                  f' --startTime {start_mjd}')
                            print(s1 + ' ; ' + s2, file=wi)
                    s3 = (f'run_moving_join --orbitFile {pop}'
                          f' --baseDir {outDir}'
                          f' --outDir {outDir}/sso')
                    s4 = (f'run_moving_fractions --workDir {outDir}/sso'
                          f' --metadata {objtype}'
                          f' --startTime {start_mjd}')
                    print(f'cat {outfile_split} | parallel -j 10 ; {s3}  ; {s4}', file=f)
                else:
                    s1 = (f'makeLSSTobs --opsimDb {filename} --orbitFile {orbit_files[pop]}')
                    s2 = (f'run_moving_calc --obsFile {run}__{pop}_obs.txt'
                          f' --opsimDb {filename} --orbitFile {orbit_files[pop]}'
                          f' --outDir {run}_ss'
                          f' --opsimRun {run}'
                          f' --hMin {Hrange[0]} --hMax {Hrange[1]} --hStep {Hrange[2]}'
                          f' --hMark {Hmark}'
                          f' --characterization {char}'
                          f' --objtype {objtype}'
                          f' --startTime {start_mjd}')
                    s3 = (f'run_moving_fractions --workDir {run}_ss'
                          f' --metadata {objtype}'
                          f' --startTime {start_mjd}')
                    print(s1 + ' ; ' + s2 + ' ; ' + s3, file=f)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Generate solar system processing commands")
    parser.add_argument('--db', type=str, default=None, help='database to process')
    parser.add_argument('--pop', type=str, default=None, help='identify one population to run')
    parser.add_argument("--start_mjd", type=float, default=60218, help="start of the sim")
    parser.add_argument("--split", dest='split', default=False,
                        action='store_true', help="Split up population files; rejoin during processing")
    args = parser.parse_args()

    if args.db is None:
        # Just look for any .db files in this directory
        dbFiles = glob.glob('*.db')
        # But remove trackingDb and resultsDb if they're there
        try:
            dbFiles.remove('trackingDb_sqlite.db')
        except ValueError:
            pass
        try:
            dbFiles.remove('resultsDb_sqlite.db')
        except ValueError:
            pass
    elif isinstance(args.db, str):
        dbFiles = [args.db]
    else:
        dbFiles = args.db

    generate_ss_commands(start_mjd=args.start_mjd, split=args.split, dbfiles=dbFiles, pops=args.pop)
